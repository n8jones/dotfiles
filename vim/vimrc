set nocompatible              " be iMproved, required
filetype off                  " required
syntax on
colorscheme codedark
let g:airline_theme = 'codedark'
let mapleader = ' '
filetype plugin indent on
set number relativenumber
set wildignore+=*\\target\\*,*\\.svn\\*,*\\.git\\*,*\\workspace\\*
set ruler
set visualbell
set encoding=utf-8
set ts=2 sts=2 sw=2 expandtab
set laststatus=2
set list
set listchars=eol:$,tab:-â‡¥,trail:~,extends:>,precedes:<
imap jj <Esc>
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
vnoremap <D-c> "+y
vnoremap <D-p> "+p
nmap <Leader>tf :NERDTreeToggl<CR>
nmap <Leader>to :pedit ~/Documents/todo.txt<CR>
nmap <Leader>ns :CtrlP ~/Documents/Notes/<CR>

function CreateNote(...)
  let t = localtime()
  let name = join(a:000)
  let dirname =  strftime("~/Documents/Notes/%Y/%m/", t)
  let notename = strftime("%Y%m%dT%H%M%S")
  if(strlen(name) > 0) 
    let notename = notename . '-' . tolower(join(split(name, " "), "_"))[0:30]
  endif
  let notename = notename . '.md'
  execute 'new ' . dirname . notename
  let frontmatter = ["---"]
  call add(frontmatter, "date: " . strftime("%Y-%m-%d %H:%M:%S%z"))
  call add(frontmatter, "tags: ")
  call add(frontmatter, "location: ")
  call add(frontmatter, "...")
  call add(frontmatter, "")
  if(strlen(name) > 0)
    call add(frontmatter, "# " . name)
  endif
  let failed = append(0, frontmatter)
endfunction

command -nargs=* NotesNew call CreateNote(<f-args>)
command -nargs=+ NotesSearch Ack -i <args> ~/Documents/Notes/
command -nargs=+ NotesFind AckFile <args> ~/Documents/Notes/

function s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir) && confirm("Make directory " . dir . "? ", "&Yes\n&No") == 1
      call mkdir(dir, 'p')
    endif
  endif
endfunction
augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_cmd = 'CtrlPMixed'

if executable('ag') 
  let g:ackprg = 'ag --vimgrep'
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif

if executable('rg')
  let g:ackprg = 'rg --vimgrep'
  let g:ctrlp_user_command = 'rg %s -g "" --color never -l --files'
  let g:ctrlp_use_caching = 0
endif

let g:markdown_fenced_languages = ['groovy', 'java']
let g:markdown_folding = 1
let g:markdown_minlines = 100

let g:Todo_txt_prefix_creation_date=1

let g:airline_powerline_fonts = 1

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> <f2> <plug>(lsp-rename)
  " refer to doc to add more commands
  set completeopt+=preview
endfunction

augroup lsp_install
  au!
  " call s:on_lsp_buffer_enabled only for languages that has the server registered.
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

set mouse=a

let java_highlight_functions = 1
let java_highlight_all = 1
" If you are trying this at runtime, you need to reload the syntax file
set filetype=java

" Some more highlights, in addition to those suggested by cmcginty
highlight link javaScopeDecl Statement
highlight link javaType Type
highlight link javaDocTags PreProc

set rtp+=/usr/local/opt/fzf
